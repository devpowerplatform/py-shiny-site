---
title: Component test page
jupyter: python3
resources:
  - assets/shadow-container.js
  - assets/shiny_component_assets/**
format:
  html:
    css:
      - ../components/_partials/components.css
      - assets/custom-styles.css
---

::::: {.column-screen-inset .mx-auto style="max-width: 1300px;"}

```{python}
#| echo: false

# The directory where we'll copy assets to, afrom the shiny package. This directory won't
# be committed to git.
SHINY_ASSETS_DIR="assets/shiny_component_assets"

import re
from pathlib import Path, PurePath
from typing import TypedDict

from htmltools import HTMLDependency, TagList, tags

import shiny.html_dependencies
from shiny.ui._html_deps_external import bootstrap_deps

# Recursively copy files from here to
import shutil
src_dir = shiny.html_dependencies.shiny_deps().source_path_map()["source"]
dest_dir = Path(SHINY_ASSETS_DIR).resolve()
shutil.copytree(src_dir, dest_dir, dirs_exist_ok=True)

class DependencyMapping(TypedDict):
    source: str
    href: str


def get_css_mappings(dep: HTMLDependency) -> list[DependencyMapping]:
    css_deps: list[DependencyMapping] = []
    for css_dep in dep.stylesheet:
        path_map = dep.source_path_map()
        source_path = Path(path_map["source"]) / css_dep["href"]
        href = PurePath(path_map["href"]) / css_dep["href"]
        css_deps.append({"source": str(source_path), "href": str(href)})
    return css_deps


def get_dep_tags(
    dep: HTMLDependency | list[HTMLDependency], prefix: str = SHINY_ASSETS_DIR
) -> TagList:
    if not isinstance(dep, list):
        dep = [dep]

    res = TagList()
    for d in dep:
        res.extend(get_dep_tags_single(d, prefix))
    return res



def get_dep_tags_single(dep: HTMLDependency, prefix: str | Path) -> TagList:
    res = TagList()

    prefix = Path(prefix)
    if dep.source and "subdir" in dep.source:
        prefix = prefix / (Path(dep.source["subdir"]).relative_to("www/shared/"))

    for sheet in dep.stylesheet:
        res.append(tags.link(rel="stylesheet", href=str(prefix / sheet["href"])))
    for script in dep.script:
        # If contains jquery.*.js or shiny.*js, skip
        if re.search(r"jquery.*\.js|shiny.*\.js", script["src"]):
            continue
        # TODO: Add extra attrs? maybe splat

        res.append(tags.script(src=str(prefix / script["src"])))

    if dep.head:
        res.extend(dep.head)

    return res
```

```{python}
#| echo: false
#| output: asis

from htmltools import TagAttrs, TagAttrValue, TagChild

from shiny import ui
from shiny.ui._html_deps_external import bootstrap_deps

# import htmltools
# htmltools.html_dependency_render_mode = "json"


def shadow_container(*args: TagChild | TagAttrs, **kwargs: TagAttrValue):
    return ui.Tag("shadow-container", *args, **kwargs)


def component_card(*args: TagChild | TagAttrs, **kwargs: TagAttrValue):
    return shadow_container(
        ui.div(
            {"class": "content"},
            *args,
            **kwargs
        ),
    )


def display_component_card(title: str, *args: TagChild | TagAttrs, **kwargs: TagAttrValue):
    card = component_card(*args, **kwargs)

    card.append(get_dep_tags(bootstrap_deps()))
    card.append(get_dep_tags(card.get_dependencies()))


    display(
        ui.div(
            {"class": "g-col-md-4 g-col-sm-6 g-col-12 component-list-column"},
            ui.div(
                {"class": "component-list-header"},
                ui.a(
                    { "class": "component-list-header-text", "href": "" },
                    ui.div({"class": "h5"}, title),
                ),
            ),
            ui.div(
                {"class": "component-list-card"},
                card,
            ),
        )
    )

# RequireJS needs to be loaded for some components
display(get_dep_tags(shiny.html_dependencies.require_deps()))

```


:::: {.g-col-xl-9 .g-col-12 .pt-3 .pt-xl-5 .ps-0 .ps-xl-5 .ms-0 .ms-xl-4}
::: {.grid}

```{python}
#| echo: false
#| output: asis

display_component_card(
    "Action Button",
    ui.input_action_button("actionbutton", "Action Button")
)

display_component_card(
    "Action Link",
    ui.input_action_link("actionlink", "Action Link")
)

display_component_card(
    "Checkbox",
    ui.input_checkbox("checkbox", "Checkbox")
)

display_component_card(
    "Checkbox Group",
    ui.input_checkbox_group(
        "checkboxgroup",
        None,
        ["Watch me Whip", "Watch me Nae Nae", "Watch neither"]
    )
)

display_component_card(
    "Date Range Selector",
    ui.input_date_range("daterange", None),
    ui.tags.script("""
    (() => {
        let el = document.currentScript.parentElement;

        setTimeout(() => {
            let inputEl = $(el).find("#daterange").find("input");
            inputEl.eq(0).bsDatepicker("setUTCDate", new Date());
            inputEl.eq(1).bsDatepicker("setUTCDate", new Date());
        }, 1000);
    })();
    """),
)

display_component_card(
    "Date Selector",
    ui.input_date("date", None),
    ui.tags.script("""
    (() => {
        let el = document.currentScript.parentElement;

        setTimeout(() => {
            let inputEl = $(el).find("#date").find("input");
            inputEl.bsDatepicker("setUTCDate", new Date());
        }, 1000);
    })();
    """),
)

display_component_card(
    "Numeric Input",
    ui.input_numeric("number", None, value=100),
)

display_component_card(
    "Password Field",
    ui.input_password("password", None, placeholder="Enter password"),
)

display_component_card(
    "Radio Buttons",
    ui.input_radio_buttons(
        "radio",
        "Never gonna:",
        ["Give you up", "Let you down"]
    )
)

display_component_card(
    "Select (Multiple)",
    {"style": "min-width: 220px;"},
    ui.input_select(
        "select_multiple",
        "",
        {
            "1": {"1A": "Choice 1A", "1B": "Choice 1B", "1C": "Choice 1C"},
            "2": {"2A": "Choice 2A", "2B": "Choice 2B", "2C": "Choice 2C"},
        },
        multiple=True,
    ),
)

display_component_card(
    "Select (Single)",
    {"style": "min-width: 220px;"},
    ui.input_select(
        "select",
        "",
        {
            "1": {"1A": "Choice 1A", "1B": "Choice 1B", "1C": "Choice 1C"},
            "2": {"2A": "Choice 2A", "2B": "Choice 2B", "2C": "Choice 2C"},
        },
    ),
)

display_component_card(
    "Selectize (Multiple)",
    # TODO: Need a better way to deal with these components that need a set width
    {"style": "min-width: 220px;"},
    ui.input_selectize(
        "selectize_multiple",
        "",
        {
            "1": {"1A": "Choice 1A", "1B": "Choice 1B", "1C": "Choice 1C"},
            "2": {"2A": "Choice 2A", "2B": "Choice 2B", "2C": "Choice 2C"},
        },
        multiple=True,
    ),
    ui.tags.script("""
    (() => {
        let el = document.currentScript.parentElement;
        let config = {
            labelField: "label",
            valueField: "value",
            searchField: ["label"],
        }

        setTimeout(() => {
            let inputEl = $(el).find("#selectize_multiple");
            inputEl.selectize(config);
        }, 1000);
    })();
    """
    ),
)

display_component_card(
    "Selectize (Single)",
    {"style": "min-width: 220px;"},
    ui.input_selectize(
        "selectize",
        "",
        {
            "1": {"1A": "Choice 1A", "1B": "Choice 1B", "1C": "Choice 1C"},
            "2": {"2A": "Choice 2A", "2B": "Choice 2B", "2C": "Choice 2C"},
        },
    ),
    ui.tags.script("""
    (() => {
        let el = document.currentScript.parentElement;
        let config = {
            labelField: "label",
            valueField: "value",
            searchField: ["label"],
        }

        setTimeout(() => {
            let inputEl = $(el).find("#selectize");
            inputEl.selectize(config);
        }, 1000);
    })();
    """
    ),
)

display_component_card(
    "Slider",
    {"style": "min-width: 220px;"},
    ui.input_slider("slider", None, 0, 20, 10),
    ui.tags.script("""
    (() => {
        let el = document.currentScript.parentElement;

        setTimeout(() => {
            $(el).find("#slider").ionRangeSlider();
        }, 1000);
    })();
    """
    ),
)

display_component_card(
    "Slider Range",
    {"style": "min-width: 220px;"},
    ui.input_slider("slider_range", None, 0, 100, [25, 70]),
    ui.tags.script("""
    (() => {
        let el = document.currentScript.parentElement;

        setTimeout(() => {
            $(el).find("#slider_range").ionRangeSlider();
        }, 1000);
    })();
    """
    ),
)

display_component_card(
    "Switch",
    ui.input_switch("switch", "Make it switchable", True)
)

display_component_card(
    "Text Area",
    ui.input_text_area("textarea", None, placeholder="Enter text")
)

display_component_card(
    "Text Box",
    ui.input_text("text", None, placeholder="Enter text")
)

```

:::
::::


```{=html}
<script src="assets/shadow-container.js"></script>
```
:::::
